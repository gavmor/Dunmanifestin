# Autogenerated from a Treetop grammar. Edits may be lost.


module ListSet
  include Treetop::Runtime

  def root
    @root ||= :list_set
  end

  module ListSet0
    def lists
      elements[1]
    end
  end

  module ListSet1
    def lists
      super.elements
    end
  end

  def _nt_list_set
    start_index = index
    if node_cache[:list_set].has_key?(index)
      cached = node_cache[:list_set][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_line_end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      s3, i3 = [], index
      loop do
        r4 = _nt_list
        if r4
          s3 << r4
        else
          break
        end
      end
      r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      s0 << r3
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ListSet0)
      r0.extend(ListSet1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:list_set][start_index] = r0

    r0
  end

  module List0
    def name
      elements[1]
    end

    def sections
      elements[2]
    end

  end

  module List1
    def sections
      super.elements
    end
  
    def items
      sections.map { |b| b.items }.flatten
    end

    def name
      super.text_value
    end
  end

  def _nt_list
    start_index = index
    if node_cache[:list].has_key?(index)
      cached = node_cache[:list][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('|', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('|')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_identifier
      s0 << r2
      if r2
        s3, i3 = [], index
        loop do
          r4 = _nt_list_section
          if r4
            s3 << r4
          else
            break
          end
        end
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        s0 << r3
        if r3
          r6 = _nt_line_end
          if r6
            r5 = r6
          else
            r5 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r5
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(List0)
      r0.extend(List1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:list][start_index] = r0

    r0
  end

  def _nt_identifier
    start_index = index
    if node_cache[:identifier].has_key?(index)
      cached = node_cache[:identifier][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_bound_identifier
    if r1
      r0 = r1
    else
      r2 = _nt_free_identifier
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:identifier][start_index] = r0

    r0
  end

  module BoundIdentifier0
    def free_identifier
      elements[1]
    end
  end

  def _nt_bound_identifier
    start_index = index
    if node_cache[:bound_identifier].has_key?(index)
      cached = node_cache[:bound_identifier][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('$', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('$')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_free_identifier
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(BoundIdentifier0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:bound_identifier][start_index] = r0

    r0
  end

  module FreeIdentifier0
  end

  def _nt_free_identifier
    start_index = index
    if node_cache[:free_identifier].has_key?(index)
      cached = node_cache[:free_identifier][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[A-Za-z_]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[A-Za-z0-9_]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(FreeIdentifier0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:free_identifier][start_index] = r0

    r0
  end

  module ListSection0
    def b
      elements[0]
    end
  end

  module ListSection1
    def items
      b.items
    end
    
    def condition
      b.condition
    end
  end

  def _nt_list_section
    start_index = index
    if node_cache[:list_section].has_key?(index)
      cached = node_cache[:list_section][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    r2 = _nt_conditional_list_section
    if r2
      r1 = r2
    else
      r3 = _nt_unconditional_list_section
      if r3
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ListSection0)
      r0.extend(ListSection1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:list_section][start_index] = r0

    r0
  end

  module ConditionalListSection0
    def condition
      elements[0]
    end

    def items
      elements[1]
    end
  end

  module ConditionalListSection1
    def items
      super.elements
    end
  end

  def _nt_conditional_list_section
    start_index = index
    if node_cache[:conditional_list_section].has_key?(index)
      cached = node_cache[:conditional_list_section][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_list_section_condition
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_list_item
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ConditionalListSection0)
      r0.extend(ConditionalListSection1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:conditional_list_section][start_index] = r0

    r0
  end

  module UnconditionalListSection0
    def items
      elements[0]
    end
  end

  module UnconditionalListSection1
    def items
      super.elements
    end
    
    def condition
      nil
    end
  end

  def _nt_unconditional_list_section
    start_index = index
    if node_cache[:unconditional_list_section].has_key?(index)
      cached = node_cache[:unconditional_list_section][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      r2 = _nt_list_item
      if r2
        s1 << r2
      else
        break
      end
    end
    if s1.empty?
      @index = i1
      r1 = nil
    else
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    end
    s0 << r1
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(UnconditionalListSection0)
      r0.extend(UnconditionalListSection1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:unconditional_list_section][start_index] = r0

    r0
  end

  module ListItem0
    def line_end
      elements[0]
    end

    def multiplier
      elements[1]
    end

    def list_item_text
      elements[2]
    end
  end

  module ListItem1
    def multiplier
      if not super.empty?
        super.to_i
      else
        1
      end
    end
    
    def text_segments
      components.select { |c| c.is_a? String }
    end
    
    def variables
      components.reject { |c| c.is_a? String }
    end
    
    def raw_content
      list_item_text.text_value
    end
    
    private
    def components
      list_item_text.components
    end
  end

  def _nt_list_item
    start_index = index
    if node_cache[:list_item].has_key?(index)
      cached = node_cache[:list_item][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_line_end
    s0 << r1
    if r1
      r3 = _nt_multiplier
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        r4 = _nt_list_item_text
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ListItem0)
      r0.extend(ListItem1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:list_item][start_index] = r0

    r0
  end

  module ListItemText0
    def t
      elements[0]
    end
  end

  module ListItemText1
    def components
      t.components
    end
  end

  def _nt_list_item_text
    start_index = index
    if node_cache[:list_item_text].has_key?(index)
      cached = node_cache[:list_item_text][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    r2 = _nt_text_with_interpolated_variables
    if r2
      r1 = r2
    else
      r3 = _nt_nonempty_literal_text
      if r3
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ListItemText0)
      r0.extend(ListItemText1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:list_item_text][start_index] = r0

    r0
  end

  module TextWithInterpolatedVariables0
    def literal_text
      elements[0]
    end

    def interpolated_variable
      elements[1]
    end
  end

  module TextWithInterpolatedVariables1
    def pairs
      elements[0]
    end

    def epilogue
      elements[1]
    end
  end

  module TextWithInterpolatedVariables2
    def components
      c = []
      pairs.elements.each do |p|
        c << p.literal_text.to_s
        c << p.interpolated_variable
      end
      c += epilogue.components unless epilogue.empty?
      c
    end
  end

  def _nt_text_with_interpolated_variables
    start_index = index
    if node_cache[:text_with_interpolated_variables].has_key?(index)
      cached = node_cache[:text_with_interpolated_variables][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      i2, s2 = index, []
      r3 = _nt_literal_text
      s2 << r3
      if r3
        r4 = _nt_interpolated_variable
        s2 << r4
      end
      if s2.last
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        r2.extend(TextWithInterpolatedVariables0)
      else
        @index = i2
        r2 = nil
      end
      if r2
        s1 << r2
      else
        break
      end
    end
    if s1.empty?
      @index = i1
      r1 = nil
    else
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    end
    s0 << r1
    if r1
      r6 = _nt_nonempty_literal_text
      if r6
        r5 = r6
      else
        r5 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r5
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(TextWithInterpolatedVariables1)
      r0.extend(TextWithInterpolatedVariables2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:text_with_interpolated_variables][start_index] = r0

    r0
  end

  module InterpolatedVariable0
    def identifier
      elements[1]
    end

    def directives
      elements[2]
    end

  end

  module InterpolatedVariable1
    def name
      identifier.text_value
    end
    
    def directives
      super.elements.map(&:text_value)
    end
    
    def to_s
      "#{name}#{directives.join('')}"
    end
  end

  def _nt_interpolated_variable
    start_index = index
    if node_cache[:interpolated_variable].has_key?(index)
      cached = node_cache[:interpolated_variable][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("[", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("[")
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_identifier
      s0 << r2
      if r2
        s3, i3 = [], index
        loop do
          r4 = _nt_directive
          if r4
            s3 << r4
          else
            break
          end
        end
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        s0 << r3
        if r3
          if has_terminal?("]", false, index)
            r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("]")
            r5 = nil
          end
          s0 << r5
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(InterpolatedVariable0)
      r0.extend(InterpolatedVariable1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:interpolated_variable][start_index] = r0

    r0
  end

  module ListSectionCondition0
    def line_end
      elements[0]
    end

    def bound_identifier
      elements[1]
    end

    def sp1
      elements[2]
    end

    def sp2
      elements[4]
    end

    def free_identifier
      elements[5]
    end
  end

  module ListSectionCondition1
    def to_s
      text_value.strip
    end
  end

  def _nt_list_section_condition
    start_index = index
    if node_cache[:list_section_condition].has_key?(index)
      cached = node_cache[:list_section_condition][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_line_end
    s0 << r1
    if r1
      r2 = _nt_bound_identifier
      s0 << r2
      if r2
        r3 = _nt_sp
        s0 << r3
        if r3
          if has_terminal?('=', false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('=')
            r4 = nil
          end
          s0 << r4
          if r4
            r5 = _nt_sp
            s0 << r5
            if r5
              r6 = _nt_free_identifier
              s0 << r6
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ListSectionCondition0)
      r0.extend(ListSectionCondition1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:list_section_condition][start_index] = r0

    r0
  end

  module Multiplier0
    def natural_number
      elements[0]
    end

  end

  module Multiplier1
    def to_i
      natural_number.text_value.to_i
    end
  end

  def _nt_multiplier
    start_index = index
    if node_cache[:multiplier].has_key?(index)
      cached = node_cache[:multiplier][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_natural_number
    s0 << r1
    if r1
      if has_terminal?('@', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('@')
        r2 = nil
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Multiplier0)
      r0.extend(Multiplier1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:multiplier][start_index] = r0

    r0
  end

  module LiteralText0
  end

  module LiteralText1
    def to_s
      text_value
    end
  end

  def _nt_literal_text
    start_index = index
    if node_cache[:literal_text].has_key?(index)
      cached = node_cache[:literal_text][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1, s1 = index, []
      i2 = index
      i3 = index
      if has_terminal?('[', false, index)
        r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('[')
        r4 = nil
      end
      if r4
        r3 = r4
      else
        if has_terminal?("\n", false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("\n")
          r5 = nil
        end
        if r5
          r3 = r5
        else
          if has_terminal?('|', false, index)
            r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('|')
            r6 = nil
          end
          if r6
            r3 = r6
          else
            if has_terminal?('$', false, index)
              r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('$')
              r7 = nil
            end
            if r7
              r3 = r7
            else
              @index = i3
              r3 = nil
            end
          end
        end
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r2
      if r2
        if index < input_length
          r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("any character")
          r8 = nil
        end
        s1 << r8
      end
      if s1.last
        r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
        r1.extend(LiteralText0)
      else
        @index = i1
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    r0.extend(LiteralText1)

    node_cache[:literal_text][start_index] = r0

    r0
  end

  module NonemptyLiteralText0
  end

  module NonemptyLiteralText1
    def to_s
      text_value
    end
    
    def components
      [to_s]
    end
  end

  def _nt_nonempty_literal_text
    start_index = index
    if node_cache[:nonempty_literal_text].has_key?(index)
      cached = node_cache[:nonempty_literal_text][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1, s1 = index, []
      i2 = index
      i3 = index
      if has_terminal?('[', false, index)
        r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('[')
        r4 = nil
      end
      if r4
        r3 = r4
      else
        if has_terminal?("\n", false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("\n")
          r5 = nil
        end
        if r5
          r3 = r5
        else
          if has_terminal?('|', false, index)
            r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('|')
            r6 = nil
          end
          if r6
            r3 = r6
          else
            if has_terminal?('$', false, index)
              r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('$')
              r7 = nil
            end
            if r7
              r3 = r7
            else
              @index = i3
              r3 = nil
            end
          end
        end
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r2
      if r2
        if index < input_length
          r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("any character")
          r8 = nil
        end
        s1 << r8
      end
      if s1.last
        r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
        r1.extend(NonemptyLiteralText0)
      else
        @index = i1
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(NonemptyLiteralText1)
    end

    node_cache[:nonempty_literal_text][start_index] = r0

    r0
  end

  module Directive0
    def free_identifier
      elements[1]
    end
  end

  def _nt_directive
    start_index = index
    if node_cache[:directive].has_key?(index)
      cached = node_cache[:directive][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    if has_terminal?("#", false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("#")
      r2 = nil
    end
    if r2
      r1 = r2
    else
      if has_terminal?(".", false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure(".")
        r3 = nil
      end
      if r3
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      r4 = _nt_free_identifier
      s0 << r4
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Directive0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:directive][start_index] = r0

    r0
  end

  module NaturalNumber0
  end

  def _nt_natural_number
    start_index = index
    if node_cache[:natural_number].has_key?(index)
      cached = node_cache[:natural_number][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[1-9]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[0-9]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(NaturalNumber0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:natural_number][start_index] = r0

    r0
  end

  module LineEnd0
    def sp
      elements[0]
    end

  end

  module LineEnd1
    def sp
      elements[1]
    end
  end

  def _nt_line_end
    start_index = index
    if node_cache[:line_end].has_key?(index)
      cached = node_cache[:line_end][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      i2, s2 = index, []
      r3 = _nt_sp
      s2 << r3
      if r3
        if has_terminal?("\n", false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("\n")
          r4 = nil
        end
        s2 << r4
      end
      if s2.last
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        r2.extend(LineEnd0)
      else
        @index = i2
        r2 = nil
      end
      if r2
        s1 << r2
      else
        break
      end
    end
    if s1.empty?
      @index = i1
      r1 = nil
    else
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    end
    s0 << r1
    if r1
      r5 = _nt_sp
      s0 << r5
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(LineEnd1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:line_end][start_index] = r0

    r0
  end

  def _nt_sp
    start_index = index
    if node_cache[:sp].has_key?(index)
      cached = node_cache[:sp][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[ \\t]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)

    node_cache[:sp][start_index] = r0

    r0
  end

end

class ListSetParser < Treetop::Runtime::CompiledParser
  include ListSet
end

